# Copyright 2022 Thales DIS design services SAS
#
# Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# SPDX-License-Identifier: Apache-2.0 WITH SHL-2.0
# You may obtain a copy of the License at https://solderpad.org/licenses/
#
# Original Author: Yannick Casamatta (yannick.casamatta@thalesgroup.com)

# Guidlines:

# This pipeline can be also be triggerd underneath by CI of CVA6 repository, this requires to respected some rules:
# - In this pipeline, job artifacts must be only defined in a folder named "artifacts" at the root of the job's workdir.
# - In this pipeline, do not define before_script and after_script in the global section (avoid in job too).
# - Please prefix all jobs in this file with "pub_" which stands for "public" job.


variables:
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive


# macro: job that does not require cloning anythings
.template_job_low_footprint:
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo 'nothing'
  after_script:
    - echo 'nothing'

# macro: job launched only in case of CI triggered by core-v-verif repository (not included by cva6 CI)
.template_job_init_cva6:
  tags: [$TAGS_RUNNER]
  rules:
    - if: '$SCOPE_CVV == "true"'
      when: on_success
    - when: never

# macro: job always launched (if pipeline is created)
.template_job_full_ci:
  tags: [$TAGS_RUNNER]
  rules:
    - when: on_success

# macro: job launched only on main branches, other case set to manual (if pipeline is created)
.template_job_short_ci:
  tags: [$TAGS_RUNNER]
  rules:
    - if: '$CI_WEIGHT == "full"'
      when: on_success
    - when: manual
      allow_failure: true

# macro: job set to manual (if pipeline is created)
.template_job_always_manual:
  tags: [$TAGS_RUNNER]
  rules:
    - when: manual
      allow_failure: true


stages:
  - .pre
  - one
  - two
  - three


# In the scope of a CI triggered by core-v-verif repository:
# This job will get the HASH of the given CVA6 branch
# This HASH will be used by the next jobs instead of the CVA6 given BRANCH name
# This prevents CI to not use the same version of CVA6 in case of new commit in CVA6 branch during the execution of the CI
initjob:
  stage: .pre
  extends:
    - .template_job_low_footprint
    - .template_job_init_cva6
  needs: []
  script:
    - '[[ -e ./cva6 ]] && rm -rf cva6'
    - git clone $CVA6_REPO -b $CVA6_BRANCH --depth=1 cva6
    - cd cva6
    - echo CVA6_HASH=$(git rev-parse origin/$CVA6_BRANCH) > ../.env
    - cd ..
  artifacts:
    reports:
      dotenv: .env


pub_check_env:
  stage: one
  extends:
    - .template_job_low_footprint
    - .template_job_full_ci
  script:
    - echo $CI_WEIGHT
    - echo $RISCV
    - echo $VERILATOR_ROOT
    - echo $SPIKE_ROOT
    - echo $BBL_ROOT
    - echo $SYN_VCS_BASHRC
    - echo $SYN_DCSHELL_BASHRC
    - echo $QUESTA_BASHRC
    - echo $VIVADO_SETUP
    - echo $CVA6_REPO
    - echo $CVA6_BRANCH
    - echo $CVA6_HASH
    - echo $CORE_V_VERIF_REPO
    - echo $CORE_V_VERIF_BRANCH
    - echo $CORE_V_VERIF_HASH
    - echo $COMPLIANCE_REPO
    - echo $COMPLIANCE_BRANCH
    - echo $COMPLIANCE_HASH
    - echo $COMPLIANCE_PATCH
    - echo $TESTS_REPO
    - echo $TESTS_BRANCH
    - echo $TESTS_HASH
    - echo $DV_REPO
    - echo $DV_BRANCH
    - echo $DV_HASH
    - echo $DV_PATCH
    - echo $TAGS_RUNNER
    - echo $NUM_JOBS
    - echo $FOUNDRY_PATH
    - echo $NAND2_AREA
    - echo $TECH_NAME
    - echo $SYNTH_PERIOD
    - echo $LIB_VERILOG


pub_smoke:
  stage: one
  extends:
    - .template_job_full_ci
  needs: []
  parallel:
    matrix:
      - DV_SIMULATORS: ["veri-testharness,spike","vcs-testharness,spike","vcs-uvm,spike" ]
  script:
    - echo $SYN_VCS_BASHRC; source $SYN_VCS_BASHRC
    - source cva6/regress/smoke-tests.sh
    - mkdir -p artifacts/reports
    - python3 .gitlab-ci/scripts/report_simu.py cva6/sim/logfile.log "Smoke test $DV_SIMULATORS" "In this section we challenge all target architecture with all simulator" "artifacts/reports/$CI_JOB_NAME.yml"
  artifacts:
    paths:
      - artifacts/reports/*.yml


pub_compliance:
  stage: two
  extends:
    - .template_job_short_ci
  needs:
    - job: pub_smoke
      artifacts: false
  parallel:
    matrix:
      - DV_TARGET: [cv64a6_imafdc_sv39, cv32a6_imac_sv0]
  variables:
    DV_SIMULATORS: "veri-testharness,spike"
  script:
    - echo $SYN_VCS_BASHRC; source $SYN_VCS_BASHRC
    - source cva6/regress/dv-riscv-compliance.sh
    - mkdir -p artifacts/reports
    - python3 .gitlab-ci/scripts/report_simu.py cva6/sim/logfile.log "Compliance" "This is the regression Compliance" "artifacts/reports/$CI_JOB_NAME.yml"
  artifacts:
    paths:
      - "artifacts/reports/*.yml"


pub_tests-v:
  stage: two
  extends:
    - .template_job_short_ci
  needs:
    - job: pub_smoke
      artifacts: false
  parallel:
    matrix:
      - DV_TARGET: [cv64a6_imafdc_sv39, cv32a6_imac_sv0]
  variables:
    DV_SIMULATORS: "veri-testharness,spike"
    DV_TESTLISTS: "../tests/testlist_riscv-tests-$DV_TARGET-v.yaml"
  script:
    - echo $SYN_VCS_BASHRC; source $SYN_VCS_BASHRC
    - source cva6/regress/dv-riscv-tests.sh
    - mkdir -p artifacts/reports
    - python3 .gitlab-ci/scripts/report_simu.py cva6/sim/logfile.log "Riscv-test V" "This is the regression riscv-test (virtual)" "artifacts/reports/$CI_JOB_NAME.yml"
  artifacts:
    paths:
      - "artifacts/reports/*.yml"


pub_tests-p:
  stage: two
  extends:
    - .template_job_short_ci
  needs:
    - job: pub_smoke
      artifacts: false
  parallel:
    matrix:
      - DV_TARGET: [cv64a6_imafdc_sv39, cv32a6_imac_sv0]
  variables:
    DV_SIMULATORS: "veri-testharness,spike"
    DV_TESTLISTS: "../tests/testlist_riscv-tests-$DV_TARGET-p.yaml"
  script:
    - echo $SYN_VCS_BASHRC; source $SYN_VCS_BASHRC
    - source cva6/regress/dv-riscv-tests.sh
    - mkdir -p artifacts/reports
    - python3 .gitlab-ci/scripts/report_simu.py cva6/sim/logfile.log "Riscv-test P" "This is the regression riscv-test (physical)" "artifacts/reports/$CI_JOB_NAME.yml"
  artifacts:
    paths:
      - "artifacts/reports/*.yml"


pub_synthesis:
  stage: two
  extends:
    - .template_job_always_manual
  needs:
    - job: pub_smoke
      artifacts: false
  parallel:
    matrix:
      - TARGET: [cv64a6_imafdc_sv39]
        PERIOD: ["1.1"]
      - TARGET: [cv32a6_imac_sv0]
        PERIOD: ["0.95"]
  variables:
    INPUT_DELAY: "0.46"
    OUTPUT_DELAY: "0.11"
  script:
    #ack trick to manage float gitlab-ci variables that seems to support only string or integer
    - echo $(echo $SYNTH_PERIOD)
    - echo $(echo $INPUT_DELAY)
    - echo $(echo $OUTPUT_DELAY)
    - echo $(echo $NAND2_AREA)
    - echo $FOUNDRY_PATH
    - echo $PERIOD
    - echo $TECH_NAME
    - echo $TARGET
    - source ./cva6/regress/install-cva6.sh
    - echo $SYN_DCSHELL_BASHRC; source $SYN_DCSHELL_BASHRC
    - make -C core-v-cores/cva6/pd/synth cva6_synth PERIOD=$(echo $PERIOD) NAND2_AREA=$(echo $NAND2_AREA) FOUNDRY_PATH=$FOUNDRY_PATH TECH_NAME=$TECH_NAME INPUT_DELAY=$(echo $INPUT_DELAY) OUTPUT_DELAY=$(echo $OUTPUT_DELAY) TARGET=$TARGET
    - mkdir -p artifacts/reports
    - mv core-v-cores/cva6/pd/synth/ariane_synth_modified.v artifacts/ariane_synth_modified_$TARGET.v
    - mv core-v-cores/cva6/pd/synth/ariane_synth.v artifacts/ariane_synth_$TARGET.v
    - python3 .gitlab-ci/scripts/report_synth.py core-v-cores/cva6/pd/synth/ariane/reports/$PERIOD/ariane_$(echo $TECH_NAME)_synth_area.rpt "ASIC Synthesis" "Synthesis indicator with specific Techno" "$NAND2_AREA" "artifacts/reports/$CI_JOB_NAME.yml"
  artifacts:
    paths:
      - artifacts/ariane_synth_modified_$TARGET.v
      - artifacts/ariane_synth_$TARGET.v
      - "artifacts/reports/*.yml"


pub_smoke-gate:
  stage: three
  extends:
    - .template_job_always_manual
  variables:
    DV_TARGET: "cv64a6_imafdc_sv39"
  needs:
    - job: pub_synthesis
      artifacts: true
  script:
    - echo $LIB_VERILOG
    - source ./cva6/regress/install-cva6.sh
    - source ./cva6/regress/install-riscv-dv.sh
    - source ./cva6/regress/install-riscv-tests.sh
    - mv artifacts/ariane_synth_modified_$DV_TARGET.v core-v-cores/cva6/pd/synth/ariane_synth_modified.v
    - mv artifacts/ariane_synth_$DV_TARGET.v core-v-cores/cva6/pd/synth/ariane_synth.v
    - echo $SYN_VCS_BASHRC; source $SYN_VCS_BASHRC
    - cd cva6/sim
    - make vcs_clean_all
    - python3 cva6.py --testlist=../tests/testlist_riscv-tests-cv64a6_imafdc_sv39-p.yaml --test rv64ui-p-ld --iss_yaml cva6.yaml --target cv64a6_imafdc_sv39 --iss=spike,vcs-gate $DV_OPTS
    - cd ../..
    - mkdir -p artifacts/reports
    - python3 .gitlab-ci/scripts/report_simu.py cva6/sim/logfile.log "Smoke Gate" "Just one test to check netlist" "artifacts/reports/$CI_JOB_NAME.yml"
  artifacts:
    paths:
      - "artifacts/reports/*.yml"


pub_linux:
  stage: three
  extends:
    - .template_job_short_ci
  needs:
    - job: pub_compliance
      artifacts: false
  script:
    - source cva6/regress/linux.sh
  timeout: 2h 30m


pub_fpga-build:
  stage: three
  extends:
    - .template_job_short_ci
  needs:
    - job: pub_compliance
      artifacts: false
  script:
    - source $VIVADO_SETUP
    - source cva6/regress/install-cva6.sh
    - make -C core-v-cores/cva6 fpga


merge_report:
  stage: .post
  tags: [$TAGS_RUNNER]
  rules:
    - if: '$DASHBOARD_URL'
      when: always
    - when: never
  script:
    - ls -al artifacts/reports
    - echo $DASHBOARD_URL
    - python3 .gitlab-ci/scripts/merge_job_reports.py artifacts/reports pipeline_report_$CI_PIPELINE_ID.yml
    - ls -al
  artifacts:
    paths:
      - "artifacts/reports/pipeline_report_$CI_PIPELINE_ID.yml"

